"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var platform_browser_1 = require("@angular/platform-browser");
var sidebar_service_1 = require("./sidebar.service");
exports.SIDEBAR_POSITION = {
    Left: 'left',
    Right: 'right',
    Top: 'top',
    Bottom: 'bottom'
};
var Sidebar = (function () {
    function Sidebar(_document, sidebarService) {
        this._document = _document;
        this.sidebarService = sidebarService;
        this.open = false;
        this.openChange = new core_1.EventEmitter();
        this.position = exports.SIDEBAR_POSITION.Left;
        this.closeOnClickOutside = false;
        this.showOverlay = false;
        this.animate = true;
        this.defaultStyles = false;
        this.trapFocus = true;
        this.autoFocus = true;
        this.openOnSlide = true;
        this.threshold = 10;
        this.onOpen = new core_1.EventEmitter();
        this.onClose = new core_1.EventEmitter();
        this.onAnimationStarted = new core_1.EventEmitter();
        this.onAnimationDone = new core_1.EventEmitter();
        this._animate = false;
        this._visibleSidebarState = '';
        this._onClickOutsideAttached = false;
        this._focusableElementsString = 'a[href], area[href], input:not([disabled]), select:not([disabled]),' +
            'textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex], [contenteditable]';
        this._closeAttached = false;
        this._sliding = false;
        this.closePercentage = 0;
        this._manualClose = this._manualClose.bind(this);
        this._trapFocus = this._trapFocus.bind(this);
        this._onClickOutside = this._onClickOutside.bind(this);
        this._elBody = document.body;
    }
    Sidebar.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.subscription = this.sidebarService
            .onClose(function () {
            if (!_this._closeAttached) {
                _this._manualClose();
            }
        });
        if (this._elSidebar) {
            this._elSidebar.nativeElement.addEventListener('animationend', function () {
                _this._visibleSidebarState = '';
            });
            if (this.openOnSlide) {
                this._openOnSlide();
            }
        }
        document.body.style.position = 'relative';
    };
    Sidebar.prototype.ngAfterViewInit = function () {
        var _this = this;
        setTimeout(function () { return _this._animate = _this.animate; }, 0);
    };
    Sidebar.prototype.ngOnChanges = function (changes) {
        if (changes['open']) {
            if (this.open) {
                this._open();
            }
            else {
                this._close();
            }
            this._setVisibleSidebarState();
        }
        if (changes['closeOnClickOutside']) {
            this._initCloseOnClickOutside();
        }
        if (changes['position']) {
            this._setVisibleSidebarState();
        }
    };
    Sidebar.prototype.ngOnDestroy = function () {
        this._destroyCloseOnClickOutside();
        this.subscription.unsubscribe();
    };
    Sidebar.prototype._animationStarted = function (e) {
        this.onAnimationStarted.emit(e);
    };
    Sidebar.prototype._animationDone = function (e) {
        this.onAnimationDone.emit(e);
    };
    Sidebar.prototype._setVisibleSidebarState = function () {
        var canAnimate = false;
        this._visibleSidebarState = '';
        if (this.open) {
            this._visibleSidebarState = 'expanded';
        }
        else {
            canAnimate = this._visibleSidebarState.indexOf('expanded') > -1;
        }
        this._visibleOverlayState = this.open ? 'visible' : null;
    };
    Sidebar.prototype._open = function () {
        this._closeAttached = false;
        this.sidebarService.open();
        this._setFocused(true);
        this._initCloseOnClickOutside();
        this._setBodyOverflow(true);
        this.onOpen.emit(null);
    };
    Sidebar.prototype._close = function () {
        this.sidebarService.close();
        this._setFocused(false);
        this._destroyCloseOnClickOutside();
        this._setBodyOverflow(false);
        this.onClose.emit(null);
    };
    Sidebar.prototype._setBodyOverflow = function (value) {
        var bodyElement = document.body;
        if (value) {
            bodyElement.style.overflow = 'hidden';
            document.body.style.position = 'fixed';
        }
        else {
            bodyElement.style.overflow = 'scroll';
            document.body.style.position = 'relative';
        }
    };
    Sidebar.prototype._manualClose = function () {
        this._closeAttached = true;
        this.open = false;
        this.openChange.emit(false);
        this._close();
    };
    Sidebar.prototype._setFocusToFirstItem = function () {
        if (this.autoFocus && this._focusableElements && this._focusableElements.length) {
            this._focusableElements[0].focus();
        }
    };
    Sidebar.prototype._trapFocus = function (e) {
        if (this.open && this.trapFocus && !this._elSidebar.nativeElement.contains(e.target)) {
            this._setFocusToFirstItem();
        }
    };
    Sidebar.prototype._setFocused = function (open) {
        this._focusableElements = Array.from(this._elSidebar.nativeElement.querySelectorAll(this._focusableElementsString));
        if (open) {
            this._focusedBeforeOpen = this._document.activeElement;
            for (var _i = 0, _a = this._focusableElements; _i < _a.length; _i++) {
                var el = _a[_i];
                var prevTabIndex = el.getAttribute('__tabindex__');
                if (prevTabIndex) {
                    el.setAttribute('tabindex', prevTabIndex);
                    el.removeAttribute('__tabindex__');
                }
                else {
                    el.removeAttribute('tabindex');
                }
            }
            this._setFocusToFirstItem();
            this._document.body.addEventListener('focus', this._trapFocus, true);
        }
        else {
            for (var _b = 0, _c = this._focusableElements; _b < _c.length; _b++) {
                var el = _c[_b];
                var existingTabIndex = el.getAttribute('tabindex');
                if (existingTabIndex) {
                    el.setAttribute('__tabindex__', existingTabIndex);
                }
                el.setAttribute('tabindex', '-1');
            }
            if (this._focusedBeforeOpen) {
                this._focusedBeforeOpen.focus();
            }
            this._document.body.removeEventListener('focus', this._trapFocus, true);
        }
    };
    Sidebar.prototype._initCloseOnClickOutside = function () {
        var _this = this;
        if (this.open && this.closeOnClickOutside && !this._onClickOutsideAttached) {
            setTimeout(function () {
                _this._document.body.addEventListener('click', _this._onClickOutside);
                _this._onClickOutsideAttached = true;
            });
        }
    };
    Sidebar.prototype._destroyCloseOnClickOutside = function () {
        if (this._onClickOutsideAttached) {
            this._document.body.removeEventListener('click', this._onClickOutside);
            this._onClickOutsideAttached = false;
        }
    };
    Sidebar.prototype._onClickOutside = function (e) {
        if (this._onClickOutsideAttached && this._elSidebar && !this._elSidebar.nativeElement.contains(e.target)) {
            this._manualClose();
        }
    };
    Sidebar.prototype._openOnSlide = function () {
        var _this = this;
        for (var _i = 0, _a = [this._elSidebar.nativeElement, this._elBody]; _i < _a.length; _i++) {
            var element = _a[_i];
            this.addEventListener(element, 'touchstart mousedown', function (e) {
                _this.slideSidebarStart(e);
            });
            this.addEventListener(element, 'touchmove mousemove', function (e) {
                _this.slideSidebarMove(e);
            });
            this.addEventListener(element, 'touchend mouseup', function (_) {
                _this.slideSidebarEnd();
            });
        }
    };
    Sidebar.prototype.addEventListener = function (element, events, fn) {
        for (var _i = 0, _a = events.split(' '); _i < _a.length; _i++) {
            var event_1 = _a[_i];
            element.addEventListener(event_1, fn);
        }
    };
    Sidebar.prototype.slideSidebarStart = function (e) {
        if (Math.abs(this.getSidebarInternalBorder() - e.pageX) <= this.threshold) {
            this._sliding = true;
        }
    };
    Sidebar.prototype.getSidebarInternalBorder = function () {
        switch (this.position) {
            case exports.SIDEBAR_POSITION.Left:
                return this.pageX;
            case exports.SIDEBAR_POSITION.Right:
                return this.pageX - this.width;
        }
    };
    Sidebar.prototype.slideSidebarMove = function (e) {
        if (this._sliding) {
            this.closePercentage = this.calcTranslatePercentage(e);
            this.setTranslate();
        }
    };
    Sidebar.prototype.calcTranslatePercentage = function (e) {
        var closePercentage = this.calcClosePercentage(e);
        switch (this.position) {
            case exports.SIDEBAR_POSITION.Left:
                return Math.max(Math.min(-1 * (100 - closePercentage), 0), -100);
            case exports.SIDEBAR_POSITION.Right:
                return Math.max(Math.min(closePercentage, 100), 0);
        }
    };
    Sidebar.prototype.calcClosePercentage = function (e) {
        switch (this.position) {
            case exports.SIDEBAR_POSITION.Left:
                return e.pageX * 100 / this.width;
            case exports.SIDEBAR_POSITION.Right:
                return (e.pageX - (this.innerWidth - this.width)) * 100 / this.width;
        }
    };
    Sidebar.prototype.setTranslate = function () {
        if (this.position === exports.SIDEBAR_POSITION.Left ||
            this.position === exports.SIDEBAR_POSITION.Right) {
            this.translate = "translate3d(" + this.closePercentage + "%, 0, 0)";
        }
        else {
            this.translate = "translate3d(0, " + this.closePercentage + "%, 0)";
        }
    };
    Sidebar.prototype.slideSidebarEnd = function () {
        if (this._sliding) {
            var close_1 = Math.abs(this.closePercentage) < 50 ? false : true;
            this.translate = undefined;
            if (close_1 === this.open) {
                if (close_1) {
                    this._close();
                    this.open = false;
                }
                else {
                    this._open();
                    this.open = true;
                }
                this._setVisibleSidebarState();
                this.openChange.emit(this.open);
            }
        }
        this._sliding = false;
    };
    Object.defineProperty(Sidebar.prototype, "pageX", {
        get: function () {
            var clientRect = this._elSidebar.nativeElement.getBoundingClientRect();
            return clientRect.left + clientRect.width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sidebar.prototype, "width", {
        get: function () {
            return this._elSidebar.nativeElement.offsetWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sidebar.prototype, "innerWidth", {
        get: function () {
            return window.innerWidth;
        },
        enumerable: true,
        configurable: true
    });
    return Sidebar;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Sidebar.prototype, "open", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Sidebar.prototype, "openChange", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Sidebar.prototype, "position", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Sidebar.prototype, "closeOnClickOutside", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Sidebar.prototype, "showOverlay", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Sidebar.prototype, "animate", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Sidebar.prototype, "defaultStyles", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Sidebar.prototype, "sidebarClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Sidebar.prototype, "overlayClass", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], Sidebar.prototype, "ariaLabel", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Sidebar.prototype, "trapFocus", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Sidebar.prototype, "autoFocus", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Boolean)
], Sidebar.prototype, "openOnSlide", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], Sidebar.prototype, "threshold", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Sidebar.prototype, "onOpen", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Sidebar.prototype, "onClose", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Sidebar.prototype, "onAnimationStarted", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], Sidebar.prototype, "onAnimationDone", void 0);
__decorate([
    core_1.ViewChild('sidebar'),
    __metadata("design:type", core_1.ElementRef)
], Sidebar.prototype, "_elSidebar", void 0);
Sidebar = __decorate([
    core_1.Component({
        selector: 'ng2-sidebar',
        encapsulation: core_1.ViewEncapsulation.None,
        template: "\n    <div *ngIf='showOverlay'\n      [@visibleOverlayState]='_visibleOverlayState'\n      aria-hidden='true'\n      class='ng2-sidebar__overlay'\n      [class.ng2-sidebar__overlay--style]='open && defaultStyles'\n      [class.animate]='_animate'\n      [ngClass]='overlayClass'></div>\n\n    <aside #sidebar\n      role='complementary'\n      [attr.aria-hidden]='!open'\n      [attr.aria-label]='ariaLabel'\n      class='ng2-sidebar ng2-sidebar--{{position}}'\n      [class.ng2-sidebar--style]='defaultStyles'\n      [ngClass]='_visibleSidebarState'\n      [ngClass]='sidebarClass'\n      [class.animate]=\"_animate\"\n      [style.transform]=\"translate\">\n      <ng-content></ng-content>\n    </aside>\n  ",
        styles: ["\n    .ng2-sidebar {\n      overflow: auto;\n      pointer-events: none;\n      position: fixed;\n      z-index: 99999999;\n    }\n\n      .ng2-sidebar--left {\n        bottom: 0;\n        left: 0;\n        top: 0;\n        -webkit-transform: translate3D(-100%, 0, 0);\n        -moz-transform: translate3D(-100%, 0, 0);\n        -o-transform: translate3D(-100%, 0, 0);\n        -ms-transform: translate3D(-100%, 0, 0);\n        transform: translate3D(-100%, 0, 0);\n      }\n\n      .ng2-sidebar--right {\n        bottom: 0;\n        right: 0;\n        top: 0;\n        -webkit-transform: translate3D(100%, 0, 0);\n        -moz-transform: translate3D(100%, 0, 0);\n        -o-transform: translate3D(100%, 0, 0);\n        -ms-transform: translate3D(100%, 0, 0);\n        transform: translate3D(100%, 0, 0);\n      }\n\n      .ng2-sidebar--top {\n        left: 0;\n        right: 0;\n        top: 0;\n        -webkit-transform: translate3D(0, -100%, 0);        \n        -moz-transform: translate3D(0, -100%, 0);        \n        -o-transform: translate3D(0, -100%, 0);        \n        -ms-transform: translate3D(0, -100%, 0);        \n        transform: translate3D(0, -100%, 0);        \n      }\n\n      .ng2-sidebar--bottom {\n        bottom: 0;\n        left: 0;\n        right: 0;\n        -webkit-transform: translate3D(0, 100%, 0);        \n        -moz-transform: translate3D(0, 100%, 0);        \n        -o-transform: translate3D(0, 100%, 0);        \n        -ms-transform: translate3D(0, 100%, 0);        \n        transform: translate3D(0, 100%, 0);        \n      }\n\n      .ng2-sidebar--style {\n        background: #fff;\n        -webkit-box-shadow: 0 0 2.5em rgba(85, 85, 85, 0.5);\n                box-shadow: 0 0 2.5em rgba(85, 85, 85, 0.5);\n      }\n\n    .ng2-sidebar__overlay {\n      height: 100%;\n      left: 0;\n      pointer-events: none;\n      position: fixed;\n      top: 0;\n      width: 100%;\n      z-index: 9998;\n    }\n\n      .ng2-sidebar__overlay--style {\n        background: #000;\n        opacity: 0.75;\n      }\n\n      .expanded {\n        -webkit-transform: translate3D(0, 0, 0);\n                -moz-transform: translate3D(0, 0, 0);\n                 -ms-transform: translate3D(0, 0, 0);\n                  -o-transform: translate3D(0, 0, 0);\n             transform: translate3D(0, 0, 0);\n        pointer-events: auto;\n      }\n\n      .animate {\n        transition: transform 0.15s linear;\n      }\n  "],
        animations: [
            core_1.trigger('visibleOverlayState', [
                core_1.state('visible', core_1.style({ pointerEvents: 'auto' }))
            ])
        ]
    }),
    __param(0, core_1.Inject(platform_browser_1.DOCUMENT)),
    __metadata("design:paramtypes", [Object, sidebar_service_1.SidebarService])
], Sidebar);
exports.Sidebar = Sidebar;
