import { Subscription } from 'rxjs/Rx';
import {
  AfterContentInit,
  AfterViewInit,
  AnimationTransitionEvent,
  Component,
  ElementRef,
  EventEmitter,
  Inject,
  Input,
  OnChanges,
  OnDestroy,
  Output,
  SimpleChanges,
  ViewChild,
  ViewEncapsulation,
  trigger,
  state,
  style,
  // transition,
  // animate
} from '@angular/core';
import { DOCUMENT } from '@angular/platform-browser';

import { SidebarService } from './sidebar.service';

export const SIDEBAR_POSITION = {
  Left: 'left',
  Right: 'right',
  Top: 'top',
  Bottom: 'bottom'
};

@Component({
  selector: 'ng2-sidebar',
  encapsulation: ViewEncapsulation.None,
  template: `
    <div *ngIf='showOverlay'
      [@visibleOverlayState]='_visibleOverlayState'
      aria-hidden='true'
      class='ng2-sidebar__overlay'
      [class.ng2-sidebar__overlay--style]='open && defaultStyles'
      [class.animate]='_animate'
      [ngClass]='overlayClass'></div>

    <aside #sidebar
      role='complementary'
      [attr.aria-hidden]='!open'
      [attr.aria-label]='ariaLabel'
      class='ng2-sidebar ng2-sidebar--{{position}}'
      [class.ng2-sidebar--style]='defaultStyles'
      [ngClass]='_visibleSidebarState'
      [ngClass]='sidebarClass'
      [class.animate]="_animate"
      [style.transform]="translate">
      <ng-content></ng-content>
    </aside>
  `,
  styles: [`
    .ng2-sidebar {
      overflow: auto;
      pointer-events: none;
      position: fixed;
      z-index: 99999999;
    }

      .ng2-sidebar--left {
        bottom: 0;
        left: 0;
        top: 0;
        -webkit-transform: translate3D(-100%, 0, 0);
        -moz-transform: translate3D(-100%, 0, 0);
        -o-transform: translate3D(-100%, 0, 0);
        -ms-transform: translate3D(-100%, 0, 0);
        transform: translate3D(-100%, 0, 0);
      }

      .ng2-sidebar--right {
        bottom: 0;
        right: 0;
        top: 0;
        -webkit-transform: translate3D(100%, 0, 0);
        -moz-transform: translate3D(100%, 0, 0);
        -o-transform: translate3D(100%, 0, 0);
        -ms-transform: translate3D(100%, 0, 0);
        transform: translate3D(100%, 0, 0);
      }

      .ng2-sidebar--top {
        left: 0;
        right: 0;
        top: 0;
        -webkit-transform: translate3D(0, -100%, 0);        
        -moz-transform: translate3D(0, -100%, 0);        
        -o-transform: translate3D(0, -100%, 0);        
        -ms-transform: translate3D(0, -100%, 0);        
        transform: translate3D(0, -100%, 0);        
      }

      .ng2-sidebar--bottom {
        bottom: 0;
        left: 0;
        right: 0;
        -webkit-transform: translate3D(0, 100%, 0);        
        -moz-transform: translate3D(0, 100%, 0);        
        -o-transform: translate3D(0, 100%, 0);        
        -ms-transform: translate3D(0, 100%, 0);        
        transform: translate3D(0, 100%, 0);        
      }

      .ng2-sidebar--style {
        background: #fff;
        -webkit-box-shadow: 0 0 2.5em rgba(85, 85, 85, 0.5);
                box-shadow: 0 0 2.5em rgba(85, 85, 85, 0.5);
      }

    .ng2-sidebar__overlay {
      height: 100%;
      left: 0;
      pointer-events: none;
      position: fixed;
      top: 0;
      width: 100%;
      z-index: 9998;
    }

      .ng2-sidebar__overlay--style {
        background: #000;
        opacity: 0.75;
      }

      .expanded {
        -webkit-transform: translate3D(0, 0, 0);
                -moz-transform: translate3D(0, 0, 0);
                 -ms-transform: translate3D(0, 0, 0);
                  -o-transform: translate3D(0, 0, 0);
             transform: translate3D(0, 0, 0);
        pointer-events: auto;
      }

      .animate {
        transition: transform 0.15s linear;
      }
  `],
  animations: [
    // trigger('visibleSidebarState', [
    //   state('expanded', style({ transform: 'none', pointerEvents: 'auto', willChange: 'initial' })),
    //   state('expanded--animate', style({ transform: 'none', pointerEvents: 'auto', willChange: 'initial' })),
    //   state('collapsed--left', style({ transform: 'translateX(-110%)' })),
    //   state('collapsed--right', style({ transform: 'translateX(110%)' })),
    //   state('collapsed--top', style({ transform: 'translateY(-110%)' })),
    //   state('collapsed--bottom', style({ transform: 'translateY(110%)' })),
    //   transition('expanded--animate <=> *', animate('0.3s cubic-bezier(0, 0, 0.3, 1)'))
    // ]),
    trigger('visibleOverlayState', [
      state('visible', style({ pointerEvents: 'auto' }))
    ])
  ]
})
export class Sidebar implements AfterContentInit, AfterViewInit, OnChanges, OnDestroy {
  // `openChange` allows for 2-way data binding
  @Input() open: boolean = false;
  @Output() openChange: EventEmitter<boolean> = new EventEmitter<boolean>();

  @Input() position: string = SIDEBAR_POSITION.Left;
  @Input() closeOnClickOutside: boolean = false;
  @Input() showOverlay: boolean = false;
  @Input() animate: boolean = true;

  @Input() defaultStyles: boolean = false;

  @Input() sidebarClass: string;
  @Input() overlayClass: string;

  @Input() ariaLabel: string;
  @Input() trapFocus: boolean = true;
  @Input() autoFocus: boolean = true;

  @Input() openOnSlide: boolean = true;
  @Input() threshold = 10;

  @Output() onOpen: EventEmitter<null> = new EventEmitter<null>();
  @Output() onClose: EventEmitter<null> = new EventEmitter<null>();

  @Output() onAnimationStarted: EventEmitter<AnimationTransitionEvent> =
  new EventEmitter<AnimationTransitionEvent>();
  @Output() onAnimationDone: EventEmitter<AnimationTransitionEvent> =
  new EventEmitter<AnimationTransitionEvent>();

  _animate: boolean = false;
  _visibleSidebarState: string = '';

  /** @internal */
  _visibleOverlayState: string;

  @ViewChild('sidebar')
  _elSidebar: ElementRef;

  // @ContentChildren(CloseSidebar)
  // private _closeDirectives: QueryList<CloseSidebar>;

  translate;
  private _onClickOutsideAttached: boolean = false;

  private _focusableElementsString: string = 'a[href], area[href], input:not([disabled]), select:not([disabled]),' +
  'textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex], [contenteditable]';
  private _focusableElements: Array<HTMLElement>;
  private _focusedBeforeOpen: HTMLElement;

  private subscription: Subscription;
  private _closeAttached: boolean = false;

  private _elBody: HTMLElement;
  private _sliding = false;
  private closePercentage = 0;

  constructor( @Inject(DOCUMENT) private _document, private sidebarService: SidebarService /*: HTMLDocument */) {
    this._manualClose = this._manualClose.bind(this);
    this._trapFocus = this._trapFocus.bind(this);
    this._onClickOutside = this._onClickOutside.bind(this);

    this._elBody = document.body;
  }

  ngAfterContentInit() {

    this.subscription = this.sidebarService
      .onClose(() => {
        if (!this._closeAttached) {
          this._manualClose();
        }

      });

    if (this._elSidebar) {
      this._elSidebar.nativeElement.addEventListener('animationend', () => {
        this._visibleSidebarState = '';
      });

      if (this.openOnSlide) {
        this._openOnSlide();
      }
    }

    document.body.style.position = 'relative';
  }

  ngAfterViewInit() {
    setTimeout(() => this._animate = this.animate, 0);
  }

  ngOnChanges(changes: SimpleChanges) {
    if (changes['open']) {
      if (this.open) {
        this._open();
      } else {
        this._close();
      }

      this._setVisibleSidebarState();
    }

    if (changes['closeOnClickOutside']) {
      this._initCloseOnClickOutside();
    }

    if (changes['position']) {
      this._setVisibleSidebarState();
    }
  }

  ngOnDestroy() {
    this._destroyCloseOnClickOutside();

    this.subscription.unsubscribe();

    // if (this._closeDirectives) {
    //   this._closeDirectives.forEach((dir: CloseSidebar) => {
    //     dir.clicked.unsubscribe();
    //   });
    // }
  }

  // Animation callbacks
  // ==============================================================================================

  /** @internal */
  _animationStarted(e: AnimationTransitionEvent) {
    this.onAnimationStarted.emit(e);
  }

  /** @internal */
  _animationDone(e: AnimationTransitionEvent) {
    this.onAnimationDone.emit(e);
  }


  // Sidebar toggling
  // ==============================================================================================

  private _setVisibleSidebarState() {
    // this._visibleSidebarState = this.open ?
    //   (this.animate ? 'expanded--animate' : 'expanded') :
    //   `collapsed--${this.position}`;
    let canAnimate: boolean = false;

    this._visibleSidebarState = '';

    if (this.open) {
      this._visibleSidebarState = 'expanded';
    } else {
      canAnimate = this._visibleSidebarState.indexOf('expanded') > -1;
    }

    this._visibleOverlayState = this.open ? 'visible' : null;
  }

  private _open() {
    this._closeAttached = false;
    this.sidebarService.open();

    this._setFocused(true);

    this._initCloseOnClickOutside();

    this._setBodyOverflow(true);

    this.onOpen.emit(null);
  }

  private _close() {
    this.sidebarService.close();

    this._setFocused(false);

    this._destroyCloseOnClickOutside();

    this._setBodyOverflow(false);

    this.onClose.emit(null);
  }

  private _setBodyOverflow(value: boolean) {
    let bodyElement = document.body;
    if (value) {
      bodyElement.style.overflow = 'hidden';
      document.body.style.position = 'fixed';
    } else {
      bodyElement.style.overflow = 'scroll';
      document.body.style.position = 'relative';
    }
  }

  private _manualClose() {
    this._closeAttached = true;

    this.open = false;
    this.openChange.emit(false);

    this._close();
  }


  // Focus on open/close
  // ==============================================================================================

  private _setFocusToFirstItem() {
    if (this.autoFocus && this._focusableElements && this._focusableElements.length) {
      this._focusableElements[0].focus();
    }
  }

  private _trapFocus(e: FocusEvent) {
    if (this.open && this.trapFocus && !this._elSidebar.nativeElement.contains(e.target)) {
      this._setFocusToFirstItem();
    }
  }

  // Handles the ability to focus sidebar elements when it's open/closed
  private _setFocused(open: boolean) {
    this._focusableElements = Array.from(
      this._elSidebar.nativeElement.querySelectorAll(this._focusableElementsString)) as Array<HTMLElement>;

    if (open) {
      this._focusedBeforeOpen = this._document.activeElement as HTMLElement;

      // Restore focusability, with previous tabindex attributes
      for (let el of this._focusableElements) {
        const prevTabIndex = el.getAttribute('__tabindex__');
        if (prevTabIndex) {
          el.setAttribute('tabindex', prevTabIndex);
          el.removeAttribute('__tabindex__');
        } else {
          el.removeAttribute('tabindex');
        }
      }

      this._setFocusToFirstItem();

      this._document.body.addEventListener('focus', this._trapFocus, true);
    } else {
      // Manually make all focusable elements unfocusable, saving existing tabindex attributes
      for (let el of this._focusableElements) {
        const existingTabIndex = el.getAttribute('tabindex');
        if (existingTabIndex) {
          el.setAttribute('__tabindex__', existingTabIndex);
        }

        el.setAttribute('tabindex', '-1');
      }

      if (this._focusedBeforeOpen) {
        this._focusedBeforeOpen.focus();
      }

      this._document.body.removeEventListener('focus', this._trapFocus, true);
    }
  }


  // On click outside
  // ==============================================================================================

  private _initCloseOnClickOutside() {
    if (this.open && this.closeOnClickOutside && !this._onClickOutsideAttached) {
      // In a timeout so that things render first
      setTimeout(() => {
        this._document.body.addEventListener('click', this._onClickOutside);
        this._onClickOutsideAttached = true;
      });
    }
  }

  private _destroyCloseOnClickOutside() {
    if (this._onClickOutsideAttached) {
      this._document.body.removeEventListener('click', this._onClickOutside);
      this._onClickOutsideAttached = false;
    }
  }

  private _onClickOutside(e: MouseEvent) {
    if (this._onClickOutsideAttached && this._elSidebar && !this._elSidebar.nativeElement.contains(e.target)) {
      this._manualClose();
    }
  }

  // On Open Slide
  // ==============================================================================================

  private _openOnSlide() {
    for (let element of [this._elSidebar.nativeElement, this._elBody]) {
      this.addEventListener(element, 'touchstart mousedown', e => {
        this.slideSidebarStart(e);
      });
      this.addEventListener(element, 'touchmove mousemove', e => {
        this.slideSidebarMove(e);
      });
      this.addEventListener(element, 'touchend mouseup', _ => {
        this.slideSidebarEnd();
      });
    }
  }

  private addEventListener(element: HTMLElement, events: string, fn: (e?) => any) {
    for (let event of events.split(' ')) {
      element.addEventListener(event, fn);
    }
  }

  private slideSidebarStart(e) {
    if (Math.abs(this.getSidebarInternalBorder() - e.pageX) <= this.threshold) {
      this._sliding = true;
    }
  }

  private getSidebarInternalBorder() {
    switch (this.position) {
      case SIDEBAR_POSITION.Left:
        return this.pageX;
      case SIDEBAR_POSITION.Right:
        return this.pageX - this.width;
    }
  }

  private slideSidebarMove(e) {
    if (this._sliding) {
      this.closePercentage = this.calcTranslatePercentage(e);
      this.setTranslate();
    }
  }

  private calcTranslatePercentage(e) {
    let closePercentage = this.calcClosePercentage(e);
    switch (this.position) {
      case SIDEBAR_POSITION.Left:
        return Math.max(Math.min(-1 * (100 - closePercentage), 0), -100);
      case SIDEBAR_POSITION.Right:
        return Math.max(Math.min(closePercentage, 100), 0);
    }
  }

  private calcClosePercentage(e) {
    switch (this.position) {
      case SIDEBAR_POSITION.Left:
        return e.pageX * 100 / this.width;
      case SIDEBAR_POSITION.Right:
        return (e.pageX - (this.innerWidth - this.width)) * 100 / this.width;
    }
  }

  private setTranslate() {
    if (this.position === SIDEBAR_POSITION.Left ||
      this.position === SIDEBAR_POSITION.Right) {
        this.translate = `translate3d(${this.closePercentage}%, 0, 0)`;
    } else {
        this.translate = `translate3d(0, ${this.closePercentage}%, 0)`;
    }
  }

  private slideSidebarEnd() {
    if (this._sliding) {
      let close = Math.abs(this.closePercentage) < 50 ? false : true;
      this.translate = undefined;

      if (close === this.open) {
        if (close) {
          this._close();
          this.open = false;
        } else {
          this._open();
          this.open = true;
        }

        this._setVisibleSidebarState();
        this.openChange.emit(this.open);
      }
    }
    this._sliding = false;
  }

  get pageX() {
    let clientRect = this._elSidebar.nativeElement.getBoundingClientRect();
    return clientRect.left + clientRect.width;
  }

  get width() {
    return this._elSidebar.nativeElement.offsetWidth;
  }

  get innerWidth() {
    return window.innerWidth;
  }
}
